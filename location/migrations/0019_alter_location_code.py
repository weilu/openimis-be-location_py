# Generated by Django 4.2.18 on 2025-01-30 22:11

from django.db import migrations, models
from django.db import connection

# Order matters and needs to be a full list of affected views
# because mssql doesn't do cascade
DEPENDENT_VIEWS = [
    "uvwAmountClaimed", "uvwAmountRejected", "uvwAmountValuated", "uvwAmountApproved",
    "uvwClaimEntered", "uvwClaimProcessed", "uvwClaimRejected", "uvwClaimSent",
    "uvwClaimSubmitted", "uvwClaimValuated", "uvwExpenditureInsureeRange",
    "uvwHospitalAdmissions", "uvwHospitalDays", "uvwItemExpenditures", "uvwItemUtilization",
    "uvwLocations", "uvwNumberFeedbackAnswerYes", "uvwNumberFeedbackResponded",
    "uvwNumberFeedbackSent", "uvwNumberInsureeAcquired", "uvwNumberOfInsuredHouseholds",
    "uvwNumberPolicyRenewed", "uvwNumberPolicySold", "uvwOverallAssessment", "uvwPopulation",
    "uvwPremiumCollection", "uvwServiceExpenditures", "uvwServiceUtilization", "uvwVisit",
    "tblDistricts", "tblRegions", "tblVillages", "tblWards",
]

view_definitions = {}


def extract_and_drop_views(apps, schema_editor):
    if connection.vendor == 'postgresql':
        _extract_postgresql_views()
        _drop_postgresql_views()
    elif connection.vendor == 'microsoft':
        _extract_mssql_views()
        _drop_mssql_views()


def _extract_postgresql_views():
    global view_definitions
    with connection.cursor() as cursor:
        query = """
            SELECT viewname, definition
            FROM pg_views
            WHERE schemaname = 'public' AND viewname IN %s;
        """
        cursor.execute(query, (tuple(DEPENDENT_VIEWS),))
        for name, definition in cursor.fetchall():
            view_definitions[name] = f'CREATE OR REPLACE VIEW "public"."{name}" AS {definition}'


def _drop_postgresql_views():
    with connection.cursor() as cursor:
        for view in DEPENDENT_VIEWS:
            cursor.execute(f'DROP VIEW IF EXISTS "public"."{view}" CASCADE')


def _extract_mssql_views():
    global view_definitions
    with connection.cursor() as cursor:
        for view in DEPENDENT_VIEWS:
            qualified_view_name = _get_mssql_view_name(view)
            query = f"SELECT OBJECT_DEFINITION(OBJECT_ID('{qualified_view_name}'))"
            cursor.execute(query)
            result = cursor.fetchone()
            if result and result[0]:
                view_definitions[view] = result[0]
            else:
                raise RuntimeError(f'{view} not found using query {query}')

def _drop_mssql_views():
    with connection.cursor() as cursor:
        for view in DEPENDENT_VIEWS:
            qualified_view_name = _get_mssql_view_name(view)
            cursor.execute(f"IF OBJECT_ID('{qualified_view_name}', 'V') IS NOT NULL DROP VIEW {qualified_view_name};")


def _get_mssql_view_name(view_name):
    schema = "dbo" if view_name.startswith("tbl") or view_name == 'uvwLocations' else "dw"
    return f"{schema}.{view_name}"


def recreate_views(apps, schema_editor):
    with connection.cursor() as cursor:
        for view_name in reversed(DEPENDENT_VIEWS):
            cursor.execute(view_definitions[view_name])


class Migration(migrations.Migration):

    dependencies = [
        ('location', '0018_auto_20230925_2243'),
    ]

    operations = [
        migrations.RunPython(extract_and_drop_views, reverse_code=recreate_views),
        migrations.AlterField(
            model_name='location',
            name='code',
            field=models.CharField(blank=True, db_column='LocationCode', max_length=50, null=True),
        ),
        migrations.RunPython(recreate_views, reverse_code=extract_and_drop_views),
    ]
